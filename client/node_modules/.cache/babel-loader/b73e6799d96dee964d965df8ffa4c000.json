{"ast":null,"code":"var _jsxFileName = \"/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js\",\n    _s = $RefreshSig$();\n\nimport { json } from \"body-parser\";\nimport React, { setState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameLobby(props) {\n  _s();\n\n  const [gamestate, setGamestate] = setData(null);\n  const [username, setUsername] = setData(null);\n  const [uID, setUID] = setData(null);\n  useEffect(() => {\n    if (username == null) {\n      getUseridFromServer();\n    }\n\n    if (props.gamestate == null) {// Need to fetch the gamestate\n    } else {\n      setGamestate(props.gamestate);\n    }\n  }); // componentDidMount(){\n  //     if(this.props.gamestate != null){\n  //         this.getUseridFromServer();\n  //     }\n  //     else{\n  //         // check if game exists for this userID\n  //         this.getGameFromServerForSessionID();\n  //     }\n  // }\n  // getGameFromServerForSessionID = () => {\n  //     console.log(\"Getting game from server for this sessionID\");\n  //     fetch(\"/get_game_from_session\", {\n  //         method: 'GET'\n  //     })\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //         if(data.gamestate != null){\n  //             // Found a game for session\n  //             this.setState({\n  //                 gamestate: data.gamestate\n  //             })\n  //             console.log(\"Got gamedata\");\n  //         }\n  //         else{\n  //             // No game for session\n  //         }\n  //     });\n  // }\n\n  const getUseridFromServer = () => {\n    console.log(\"Getting userid from server\");\n    console.log(props.gamestate.gamecode);\n    fetch(\"/get_userid\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/Json'\n      },\n      body: JSON.stringify({\n        code: props.gamestate.gamecode\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(\"data from server: \" + data);\n\n      if (data.userID != null) {\n        let temp_username = null;\n        props.gamestate.players.forEach(player => {\n          if (player.uID == data.userID) {\n            temp_username = player.username;\n          }\n        });\n        setUsername(temp_username);\n        setUID(data.userID);\n      } else {\n        console.log(\"No userID in data from server...\");\n      }\n    });\n  };\n\n  const Players = () => {\n    if (gamestate == null) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No game created yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 20\n      }, this);\n    } else {\n      gamestate.players.forEach(player => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: player.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 24\n        }, this);\n      });\n    }\n  };\n\n  render();\n\n  if (props.gamestate != null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome to the game lobby, \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Other players\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 41\n        }, this), Players]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 20\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the game lobby, unknown.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(GameLobby, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = GameLobby;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameLobby\");","map":{"version":3,"sources":["/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js"],"names":["json","React","setState","useEffect","GameLobby","props","gamestate","setGamestate","setData","username","setUsername","uID","setUID","getUseridFromServer","console","log","gamecode","fetch","method","headers","body","JSON","stringify","code","then","res","data","userID","temp_username","players","forEach","player","Players","render"],"mappings":"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","sourcesContent":["import { json } from \"body-parser\";\nimport React, {setState, useEffect} from \"react\";\n\nexport default function GameLobby(props){\n\n    const [gamestate, setGamestate] = setData(null)\n    const [username, setUsername] = setData(null)\n    const [uID, setUID] = setData(null)\n\n    useEffect( () => {\n        if(username == null){\n            getUseridFromServer();\n        }\n\n        if(props.gamestate == null){\n            // Need to fetch the gamestate\n        }\n        else{\n            setGamestate(props.gamestate);\n        }\n\n    })\n\n    // componentDidMount(){\n    //     if(this.props.gamestate != null){\n    //         this.getUseridFromServer();\n    //     }\n    //     else{\n    //         // check if game exists for this userID\n    //         this.getGameFromServerForSessionID();\n    //     }\n    // }\n\n    // getGameFromServerForSessionID = () => {\n    //     console.log(\"Getting game from server for this sessionID\");\n    //     fetch(\"/get_game_from_session\", {\n    //         method: 'GET'\n    //     })\n    //     .then((res) => res.json())\n    //     .then((data) => {\n    //         if(data.gamestate != null){\n    //             // Found a game for session\n    //             this.setState({\n    //                 gamestate: data.gamestate\n    //             })\n    //             console.log(\"Got gamedata\");\n    //         }\n    //         else{\n    //             // No game for session\n    //         }\n    //     });\n    // }\n\n    const getUseridFromServer = () => {\n        console.log(\"Getting userid from server\");\n        console.log(props.gamestate.gamecode);\n        fetch(\"/get_userid\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/Json'\n              },\n              body: JSON.stringify({code: props.gamestate.gamecode})\n          })\n        .then((res) => res.json())\n        .then((data) => {\n            console.log(\"data from server: \" + data);\n            if(data.userID != null){\n                \n                let temp_username = null\n                props.gamestate.players.forEach(player => {\n                    if(player.uID == data.userID){\n                        temp_username = player.username;\n                    }\n                });\n                setUsername(temp_username);\n                setUID(data.userID)\n            }\n            else{\n                console.log(\"No userID in data from server...\");\n            }\n        });\n    }\n\n    const Players = () => {\n        if(gamestate == null){\n            return <p>No game created yet.</p>\n        }\n        else{\n            gamestate.players.forEach(player => {\n                return <p>{player.username}</p>\n            });\n        }\n    }\n\n    render()\n        if(props.gamestate != null){\n            return(<div>\n                <h1>Welcome to the game lobby, {username}</h1>\n                <div>\n                    <p>Other players</p><br/>\n                    {Players}\n                </div>\n            </div>)\n        }\n        else{\n            return(\n                <div>\n                    <h1>Welcome to the game lobby, unknown.</h1>\n                </div>\n            )\n        }\n    }\n\n"]},"metadata":{},"sourceType":"module"}
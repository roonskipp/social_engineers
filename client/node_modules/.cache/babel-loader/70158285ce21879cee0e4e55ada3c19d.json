{"ast":null,"code":"var _jsxFileName = \"/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js\",\n    _s = $RefreshSig$();\n\nimport { json } from \"body-parser\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameLobby(props) {\n  _s();\n\n  const [gamestate, setGamestate] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [otherPlayers, setOtherPlayers] = useState(null); // Probably dont need this\n\n  const [uID, setUID] = useState(null);\n  useEffect(() => {\n    console.log(\"UseEffect\");\n\n    if (username == null) {\n      console.log(\"Trying to get username\");\n      getUseridFromServer();\n    } else {\n      console.log(username);\n    }\n\n    if (otherPlayers == null) {\n      getOtherPlayers();\n    }\n\n    if (props.gamestate == null) {\n      // Need to fetch the gamestate\n      // Perhaps the user refreshed their site or closed the browser\n      getGameStateFromServer();\n    } else {\n      setGamestate(props.gamestate);\n    }\n  });\n\n  const getOtherPlayers = () => {\n    if (gamestate == null) {\n      console.log(\"Cant get usernames without a gamestate id\");\n    } else {\n      fetch('/get_players', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'Application/Json'\n        },\n        body: JSON.stringify({\n          gamestate_id: gamestate.id\n        })\n      }).then(res => res.json()).then(data => {\n        // usernames should be here\n        // names are in a list\n        setOtherPlayers(data);\n        console.log(data);\n      });\n    }\n  };\n\n  const renderOtherPlayers = () => {\n    if (otherPlayers != null) {\n      return otherPlayers.map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: player.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 49\n      }, this));\n    }\n  };\n\n  const renderUsername = () => {\n    if (username != null) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  const getGameStateFromServer = () => {\n    fetch('/get_gamestate', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/Json'\n      }\n    }).then(res => res.json()).then(data => {\n      if (data != null) {\n        setGamestate(data.gamestate);\n      } else {\n        console.log(\"Data was null. Expected a gamestate for the session\");\n      }\n    });\n  };\n\n  const getUseridFromServer = () => {\n    console.log(\"hi\");\n    console.log(\"Getting userid from server\");\n    fetch(\"/get_username\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/Json'\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(\"data from server: \" + data);\n\n      if (data.username != null) {\n        setUsername(data.username);\n      } else {\n        console.log(\"No username in data from server...\");\n      }\n    });\n  };\n\n  const Players = () => {\n    if (gamestate == null) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No game created yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 20\n      }, this);\n    } else {\n      gamestate.players.forEach(player => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: player.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 24\n        }, this);\n      });\n    }\n  };\n\n  if (props.gamestate != null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome to the game lobby, \", renderUsername()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Other players:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 42\n        }, this), renderOtherPlayers()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 20\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome \", username, \". No game has been created yet.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(GameLobby, \"uYrXyFP8QqGN+xdKp3kKm0BodW0=\");\n\n_c = GameLobby;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameLobby\");","map":{"version":3,"sources":["/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js"],"names":["json","React","useState","useEffect","GameLobby","props","gamestate","setGamestate","username","setUsername","otherPlayers","setOtherPlayers","uID","setUID","console","log","getUseridFromServer","getOtherPlayers","getGameStateFromServer","fetch","method","headers","body","JSON","stringify","gamestate_id","id","then","res","data","renderOtherPlayers","map","player","renderUsername","Players","players","forEach"],"mappings":"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","sourcesContent":["import { json } from \"body-parser\";\nimport React, {useState, useEffect} from \"react\";\n\nexport default function GameLobby(props){\n\n    const [gamestate, setGamestate] = useState(null)\n    const [username, setUsername] = useState(null)\n    const [otherPlayers, setOtherPlayers] = useState(null)\n\n    // Probably dont need this\n    const [uID, setUID] = useState(null)\n\n    useEffect( () => {\n        console.log(\"UseEffect\")\n        if(username == null){\n            console.log(\"Trying to get username\")\n            getUseridFromServer();\n        }\n        else{\n            console.log(username);\n        }\n\n        if(otherPlayers == null){\n            getOtherPlayers();\n        }\n\n        if(props.gamestate == null){\n            // Need to fetch the gamestate\n            // Perhaps the user refreshed their site or closed the browser\n            getGameStateFromServer();\n        }\n        else{\n            setGamestate(props.gamestate);\n        }\n\n    })\n\n    const getOtherPlayers = () => {\n        if(gamestate == null){\n            console.log(\"Cant get usernames without a gamestate id\")\n        }\n        else{\n            fetch('/get_players', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'Application/Json'\n                },\n                body: \n                    JSON.stringify({gamestate_id: gamestate.id})\n            })\n            .then((res) => res.json())\n            .then((data) => {\n                // usernames should be here\n                // names are in a list\n                setOtherPlayers(data);\n                console.log(data);\n            })\n        }\n    }\n\n    const renderOtherPlayers = () => {\n        if(otherPlayers != null){\n            return otherPlayers.map((player) => <li>{player.username}</li>)\n        }\n    }\n\n    const renderUsername = () => {\n        if(username != null) {\n            return <p>{username}</p>\n        }\n    }\n\n    const getGameStateFromServer = () => {\n        fetch('/get_gamestate', {\n            method: 'GET',\n            headers: {'Content-Type' : 'application/Json'}\n        })\n        .then((res) => res.json())\n        .then((data) => {\n            if(data != null)\n            {\n                setGamestate(data.gamestate);\n            }\n            else{\n                console.log(\"Data was null. Expected a gamestate for the session\")\n            }\n        })\n    }\n\n    const getUseridFromServer = () => {\n        console.log(\"hi\");\n            console.log(\"Getting userid from server\");\n            fetch(\"/get_username\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/Json'\n                  }\n              })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(\"data from server: \" + data);\n                if(data.username != null){\n                    setUsername(data.username);\n                }\n                else{\n                    console.log(\"No username in data from server...\");\n                }\n            });\n    }\n\n    const Players = () => {\n        if(gamestate == null){\n            return <p>No game created yet.</p>\n        }\n        else{\n            gamestate.players.forEach(player => {\n                return <p>{player.username}</p>\n            });\n        }\n    }\n\n        if(props.gamestate != null){\n            return(<div>\n                <h1>Welcome to the game lobby, {renderUsername()}</h1>\n                <div>\n                    <p>Other players:</p><br/>\n                    {renderOtherPlayers()}\n                </div>\n            </div>)\n        }\n        else{\n            return(\n                <div>\n                    <h1>Welcome {username}. No game has been created yet.</h1>\n                </div>\n            )\n        }\n    }\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js\",\n    _s = $RefreshSig$();\n\nimport { json } from \"body-parser\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameLobby(props) {\n  _s();\n\n  const [gamestate, setGamestate] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [otherPlayers, setOtherPlayers] = useState(null); // Probably dont need this\n\n  const [uID, setUID] = useState(null);\n  useEffect(() => {\n    console.log(\"UseEffect\");\n\n    if (username == null) {\n      console.log(\"Trying to get username\");\n      getUseridFromServer();\n    } else {\n      console.log(username);\n    }\n\n    if (otherPlayers == null) {\n      getOtherPlayers();\n    }\n\n    if (props.gamestate == null) {// Need to fetch the gamestate\n    } else {\n      setGamestate(props.gamestate);\n    }\n  });\n\n  const getOtherPlayers = () => {\n    if (gamestate == null) {\n      console.log(\"Cant get usernames without a gamestate id\");\n    } else {\n      fetch('/get_players', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'Application/Json'\n        },\n        body: JSON.stringify({\n          gamestate_id: gamestate.id\n        })\n      }).then(res => res.json()).then(data => {\n        // usernames should be here\n        // names are in a list\n        setOtherPlayers(data);\n        console.log(data);\n      });\n    }\n  };\n\n  const renderOtherPlayers = () => {\n    if (otherPlayers != null) {\n      return otherPlayers.map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: player.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 49\n      }, this));\n    }\n  };\n\n  const renderUsername = () => {\n    if (username != null) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }, this);\n    }\n  }; // componentDidMount(){\n  //     if(this.props.gamestate != null){\n  //         this.getUseridFromServer();\n  //     }\n  //     else{\n  //         // check if game exists for this userID\n  //         this.getGameFromServerForSessionID();\n  //     }\n  // }\n  // getGameFromServerForSessionID = () => {\n  //     console.log(\"Getting game from server for this sessionID\");\n  //     fetch(\"/get_game_from_session\", {\n  //         method: 'GET'\n  //     })\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //         if(data.gamestate != null){\n  //             // Found a game for session\n  //             this.setState({\n  //                 gamestate: data.gamestate\n  //             })\n  //             console.log(\"Got gamedata\");\n  //         }\n  //         else{\n  //             // No game for session\n  //         }\n  //     });\n  // }\n\n\n  const getUseridFromServer = () => {\n    console.log(\"hi\");\n\n    if (props.gamestate == null) {\n      console.log(\"Getting userid from server\");\n      fetch(\"/get_username\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/Json'\n        }\n      }).then(res => res.json()).then(data => {\n        console.log(\"data from server: \" + data);\n\n        if (data.username != null) {\n          setUsername(data.username);\n        } else {\n          console.log(\"No username in data from server...\");\n        }\n      });\n    }\n  };\n\n  const Players = () => {\n    if (gamestate == null) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No game created yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 20\n      }, this);\n    } else {\n      gamestate.players.forEach(player => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: player.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 24\n        }, this);\n      });\n    }\n  };\n\n  if (props.gamestate != null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome to the game lobby, \", renderUsername()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Other players:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 42\n        }, this), renderOtherPlayers()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 20\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome \", username, \". No game has been created yet.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(GameLobby, \"uYrXyFP8QqGN+xdKp3kKm0BodW0=\");\n\n_c = GameLobby;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameLobby\");","map":{"version":3,"sources":["/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js"],"names":["json","React","useState","useEffect","GameLobby","props","gamestate","setGamestate","username","setUsername","otherPlayers","setOtherPlayers","uID","setUID","console","log","getUseridFromServer","getOtherPlayers","fetch","method","headers","body","JSON","stringify","gamestate_id","id","then","res","data","renderOtherPlayers","map","player","renderUsername","Players","players","forEach"],"mappings":"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","sourcesContent":["import { json } from \"body-parser\";\nimport React, {useState, useEffect} from \"react\";\n\nexport default function GameLobby(props){\n\n    const [gamestate, setGamestate] = useState(null)\n    const [username, setUsername] = useState(null)\n    const [otherPlayers, setOtherPlayers] = useState(null)\n\n    // Probably dont need this\n    const [uID, setUID] = useState(null)\n\n    useEffect( () => {\n        console.log(\"UseEffect\")\n        if(username == null){\n            console.log(\"Trying to get username\")\n            getUseridFromServer();\n        }\n        else{\n            console.log(username);\n        }\n\n        if(otherPlayers == null){\n            getOtherPlayers();\n        }\n\n        if(props.gamestate == null){\n            // Need to fetch the gamestate\n        }\n        else{\n            setGamestate(props.gamestate);\n        }\n\n    })\n\n    const getOtherPlayers = () => {\n        if(gamestate == null){\n            console.log(\"Cant get usernames without a gamestate id\")\n        }\n        else{\n            fetch('/get_players', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'Application/Json'\n                },\n                body: \n                    JSON.stringify({gamestate_id: gamestate.id})\n            })\n            .then((res) => res.json())\n            .then((data) => {\n                // usernames should be here\n                // names are in a list\n                setOtherPlayers(data);\n                console.log(data);\n            })\n        }\n    }\n\n    const renderOtherPlayers = () => {\n        if(otherPlayers != null){\n            return otherPlayers.map((player) => <li>{player.username}</li>)\n        }\n    }\n\n    const renderUsername = () => {\n        if(username != null) {\n            return <p>{username}</p>\n        }\n    }\n\n    // componentDidMount(){\n    //     if(this.props.gamestate != null){\n    //         this.getUseridFromServer();\n    //     }\n    //     else{\n    //         // check if game exists for this userID\n    //         this.getGameFromServerForSessionID();\n    //     }\n    // }\n\n    // getGameFromServerForSessionID = () => {\n    //     console.log(\"Getting game from server for this sessionID\");\n    //     fetch(\"/get_game_from_session\", {\n    //         method: 'GET'\n    //     })\n    //     .then((res) => res.json())\n    //     .then((data) => {\n    //         if(data.gamestate != null){\n    //             // Found a game for session\n    //             this.setState({\n    //                 gamestate: data.gamestate\n    //             })\n    //             console.log(\"Got gamedata\");\n    //         }\n    //         else{\n    //             // No game for session\n    //         }\n    //     });\n    // }\n\n    const getUseridFromServer = () => {\n        console.log(\"hi\");\n        if(props.gamestate == null){\n            console.log(\"Getting userid from server\");\n            fetch(\"/get_username\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/Json'\n                  }\n              })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(\"data from server: \" + data);\n                if(data.username != null){\n                    setUsername(data.username);\n                }\n                else{\n                    console.log(\"No username in data from server...\");\n                }\n            });\n\n        }\n    }\n\n    const Players = () => {\n        if(gamestate == null){\n            return <p>No game created yet.</p>\n        }\n        else{\n            gamestate.players.forEach(player => {\n                return <p>{player.username}</p>\n            });\n        }\n    }\n\n        if(props.gamestate != null){\n            return(<div>\n                <h1>Welcome to the game lobby, {renderUsername()}</h1>\n                <div>\n                    <p>Other players:</p><br/>\n                    {renderOtherPlayers()}\n                </div>\n            </div>)\n        }\n        else{\n            return(\n                <div>\n                    <h1>Welcome {username}. No game has been created yet.</h1>\n                </div>\n            )\n        }\n    }\n\n"]},"metadata":{},"sourceType":"module"}
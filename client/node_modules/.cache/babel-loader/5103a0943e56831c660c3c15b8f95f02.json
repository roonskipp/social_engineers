{"ast":null,"code":"var _jsxFileName = \"/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js\";\nimport { json } from \"body-parser\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GameLobby extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getGameFromServerForSessionID = () => {\n      console.log(\"Getting game from server for this sessionID\");\n      fetch(\"/get_game_from_session\", {\n        method: 'GET'\n      }).then(res => res.json()).then(data => {\n        if (data.gamestate != null) {\n          // Found a game for session\n          this.setState({\n            gamestate: data.gamestate\n          });\n          console.log(\"Got gamedata\");\n        } else {// No game for session\n        }\n      });\n    };\n\n    this.getUseridFromServer = () => {\n      console.log(\"Getting userid from server\");\n      console.log(this.props.gamestate.gamecode);\n      fetch(\"/get_userid\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/Json'\n        },\n        body: JSON.stringify({\n          code: this.props.gamestate.gamecode\n        })\n      }).then(res => res.json()).then(data => {\n        console.log(\"data from server: \" + data);\n\n        if (data.userID != null) {\n          let temp_username = null;\n          this.props.gamestate.players.forEach(player => {\n            if (player.uID == data.userID) {\n              temp_username = player.username;\n            }\n          });\n          this.setState({\n            userID: data.userID,\n            username: temp_username\n          });\n        } else {\n          console.log(\"No userID in data from server...\");\n        }\n      });\n    };\n\n    this.Players = () => {\n      if (this.gamestate == null) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No game created yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 20\n        }, this);\n      } else {\n        this.state.gamestate.players.forEach(player => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: player.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 24\n          }, this);\n        });\n      }\n    };\n\n    this.state = {\n      userID: null,\n      username: null\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.gamestate != null) {\n      this.getUseridFromServer();\n    } else {\n      // check if game exists for this userID\n      this.getGameFromServerForSessionID();\n    }\n  }\n\n  render() {\n    if (this.props.gamestate != null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Welcome to the game lobby, \", this.state.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Other players\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 41\n          }, this), this.Players()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to the game lobby, unknown.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Tobias/Desktop/social_engineers/client/src/components/GameLobby.js"],"names":["json","React","GameLobby","Component","constructor","props","getGameFromServerForSessionID","console","log","fetch","method","then","res","data","gamestate","setState","getUseridFromServer","gamecode","headers","body","JSON","stringify","code","userID","temp_username","players","forEach","player","uID","username","Players","state","componentDidMount","render"],"mappings":"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","sourcesContent":["import { json } from \"body-parser\";\nimport React from \"react\";\n\nexport default class GameLobby extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n                userID: null,\n                username: null\n        }\n    }\n\n    componentDidMount(){\n        if(this.props.gamestate != null){\n            this.getUseridFromServer();\n        }\n        else{\n            // check if game exists for this userID\n            this.getGameFromServerForSessionID();\n        }\n    }\n\n    getGameFromServerForSessionID = () => {\n        console.log(\"Getting game from server for this sessionID\");\n        fetch(\"/get_game_from_session\", {\n            method: 'GET'\n        })\n        .then((res) => res.json())\n        .then((data) => {\n            if(data.gamestate != null){\n                // Found a game for session\n                this.setState({\n                    gamestate: data.gamestate\n                })\n                console.log(\"Got gamedata\");\n            }\n            else{\n                // No game for session\n            }\n        });\n    }\n\n    getUseridFromServer = () => {\n        console.log(\"Getting userid from server\");\n        console.log(this.props.gamestate.gamecode);\n        fetch(\"/get_userid\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/Json'\n              },\n              body: JSON.stringify({code: this.props.gamestate.gamecode})\n          })\n        .then((res) => res.json())\n        .then((data) => {\n            console.log(\"data from server: \" + data);\n            if(data.userID != null){\n                \n                let temp_username = null\n                this.props.gamestate.players.forEach(player => {\n                    if(player.uID == data.userID){\n                        temp_username = player.username;\n                    }\n                });\n                this.setState(\n                    {\n                        userID: data.userID,\n                        username: temp_username\n                    });\n            }\n            else{\n                console.log(\"No userID in data from server...\");\n            }\n        });\n    }\n\n    Players = () => {\n        if(this.gamestate == null){\n            return <p>No game created yet.</p>\n        }\n        else{\n            this.state.gamestate.players.forEach(player => {\n                return <p>{player.username}</p>\n            });\n        }\n    }\n\n    render(){\n        if(this.props.gamestate != null){\n            return(<div>\n                <h1>Welcome to the game lobby, {this.state.username}</h1>\n                <div>\n                    <p>Other players</p><br/>\n                    {this.Players()}\n                </div>\n            </div>)\n        }\n        else{\n            return(\n                <div>\n                    <h1>Welcome to the game lobby, unknown.</h1>\n                </div>\n            )\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}